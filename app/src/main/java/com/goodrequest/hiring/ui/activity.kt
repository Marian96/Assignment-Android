package com.goodrequest.hiring.ui

import android.os.Bundle
import android.view.View.GONE
import android.view.View.VISIBLE
import androidx.activity.ComponentActivity
import androidx.lifecycle.*
import androidx.recyclerview.widget.RecyclerView
import com.goodrequest.hiring.PokemonApi
import com.goodrequest.hiring.R
import com.goodrequest.hiring.databinding.ActivityBinding
import com.google.android.material.snackbar.Snackbar
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach

class PokemonActivity: ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val vm by viewModel { PokemonViewModel(it, PokemonApi) }
        vm.load()

        ActivityBinding.inflate(layoutInflater).run {
            setContentView(root)
            refresh.setOnRefreshListener { vm.refresh() }
            retry.setOnClickListener {
                loading.visibility = VISIBLE
                failure.visibility = GONE
                vm.load()
            }
            val adapter = PokemonAdapter()
            items.adapter = adapter

            vm.pokemons.observe(this@PokemonActivity) { result ->
                result?.fold(
                    onSuccess = { pokemons ->
                        loading.visibility = GONE
                        refresh.isRefreshing = false
                        adapter.show(pokemons)
                    },
                    onFailure = {
                        loading.visibility = GONE
                        failure.visibility = VISIBLE
                    }
                )
            }
            vm.showRefreshError.observe(this@PokemonActivity) {
                Snackbar.make(root, getString(R.string.snackbar_error_message), Snackbar.LENGTH_SHORT).show()
            }
        }
    }
}




/**
 * Helper function that enables us to directly call constructor of our ViewModel but also
 * provides access to SavedStateHandle.
 * Shit like this is usually generated by Hilt
 */
inline fun <reified VM: ViewModel> ComponentActivity.viewModel(crossinline create: (SavedStateHandle) -> VM) =
    ViewModelLazy(
        viewModelClass = VM::class,
        storeProducer = { viewModelStore },
        factoryProducer = {
            object: AbstractSavedStateViewModelFactory(this@viewModel, null) {
                override fun <T : ViewModel> create(key: String, type: Class<T>, handle: SavedStateHandle): T =
                    create(handle) as T
            }
    })